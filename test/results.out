===== test1 =====
===== test2 =====
[]
===== test3 =====
===== test4 =====
===== test5 =====
-6
===== test6 =====
[3,/,2,+,5,-,6,*,2]
===== test7 =====
3 / 2 + 5 - 6 * 2
===== test8 =====
-> 3 / 2 + 5 - 6 * 2
-> 1 + 5 - 6 * 2
-> 6 - 6 * 2
-> 6 - 12
-> -6
===== test9 =====
2
===== test10 =====
[if,(,true,),then,2,else,3]
===== test11 =====
if true then 2 else 3
===== test12 =====
-> if true then 2 else 3
-> 2
===== test13 =====
1
===== test14 =====
[(,if,(,3,<=,4,),then,(,if,true,then,1,else,2,),else,(,2,+,3,),)]
===== test15 =====
if 3 <= 4 then if true then 1 else 2 else 2 + 3
===== test16 =====
-> if 3 <= 4 then if true then 1 else 2 else 2 + 3
-> if true then if true then 1 else 2 else 2 + 3
-> 1
===== test17 =====
120
===== test18 =====
[let,fact,:,int,->,int,=,fix,f,(,n,:,int,),:,int,->,if,n,<=,0,then,1,else,n,*,f,(,n,-,1,),in,fact,(,5,)]
===== test19 =====
let fact : (int -> int) = fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) in fact (5)
===== test20 =====
-> let fact : (int -> int) = fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) in fact (5)
-> fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (5)
-> if 5 <= 0 then 1 else 5 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (5 - 1)
-> if false then 1 else 5 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (5 - 1)
-> 5 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (4)
-> 5 * if 4 <= 0 then 1 else 4 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (4 - 1)
-> 5 * if false then 1 else 4 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (4 - 1)
-> 5 * 4 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (3)
-> 5 * 4 * if 3 <= 0 then 1 else 3 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (3 - 1)
-> 5 * 4 * if false then 1 else 3 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (3 - 1)
-> 5 * 4 * 3 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (2)
-> 5 * 4 * 3 * if 2 <= 0 then 1 else 2 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (2 - 1)
-> 5 * 4 * 3 * if false then 1 else 2 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (2 - 1)
-> 5 * 4 * 3 * 2 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (1)
-> 5 * 4 * 3 * 2 * if 1 <= 0 then 1 else 1 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (1 - 1)
-> 5 * 4 * 3 * 2 * if false then 1 else 1 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (1 - 1)
-> 5 * 4 * 3 * 2 * 1 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (0)
-> 5 * 4 * 3 * 2 * 1 * if 0 <= 0 then 1 else 0 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (0 - 1)
-> 5 * 4 * 3 * 2 * 1 * if true then 1 else 0 * fix f (n:int) : int -> if n <= 0 then 1 else n * f (n - 1) (0 - 1)
-> 5 * 4 * 3 * 2 * 1 * 1
-> 5 * 4 * 3 * 2 * 1
-> 5 * 4 * 3 * 2
-> 5 * 4 * 6
-> 5 * 24
-> 120
