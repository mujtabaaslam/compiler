===== test1 =====
5
===== test2 =====
[let,max2,=,fun,x,->,fun,y,->,if,x,>,y,then,x,else,y,in,let,a,=,5,in,let,b,=,2,in,max2,(,a,),(,b,)]
===== test3 =====
let max2 = fun x -> fun y -> if x > y then x else y in let a = 5 in let b = 2 in max2 (a) (b)
===== test4 =====
-> let max2 = fun x -> fun y -> if x > y then x else y in let a = 5 in let b = 2 in max2 (a) (b)
-> let a = 5 in let b = 2 in fun x -> fun y -> if x > y then x else y (a) (b)
-> let b = 2 in fun x -> fun y -> if x > y then x else y (5) (b)
-> fun x -> fun y -> if x > y then x else y (5) (2)
-> fun y -> if 5 > y then 5 else y (2)
-> if 5 > 2 then 5 else 2
-> if true then 5 else 2
-> 5
===== test5 =====
-6
===== test6 =====
[3,/,2,+,5,-,6,*,2]
===== test7 =====
3 / 2 + 5 - 6 * 2
===== test8 =====
-> 3 / 2 + 5 - 6 * 2
-> 1 + 5 - 6 * 2
-> 6 - 6 * 2
-> 6 - 12
-> -6
===== test9 =====
2
===== test10 =====
[if,(,true,),then,2,else,3]
===== test11 =====
if true then 2 else 3
===== test12 =====
-> if true then 2 else 3
-> 2
===== test13 =====
1
===== test14 =====
[(,if,(,3,<=,4,),then,(,if,true,then,1,else,2,),else,(,2,+,3,),)]
===== test15 =====
if 3 <= 4 then if true then 1 else 2 else 2 + 3
===== test16 =====
-> if 3 <= 4 then if true then 1 else 2 else 2 + 3
-> if true then if true then 1 else 2 else 2 + 3
-> 1
===== test17 =====
120
===== test18 =====
[let,fact,=,fix,f,n,->,if,n,>,0,then,n,*,f,(,n,-,1,),else,1,in,fact,(,5,)]
===== test19 =====
let fact = fix f n -> if n > 0 then n * f (n - 1) else 1 in fact (5)
===== test20 =====
-> let fact = fix f n -> if n > 0 then n * f (n - 1) else 1 in fact (5)
-> fix f n -> if n > 0 then n * f (n - 1) else 1 (5)
-> if 5 > 0 then 5 * fix f n -> if n > 0 then n * f (n - 1) else 1 (5 - 1) else 1
-> if true then 5 * fix f n -> if n > 0 then n * f (n - 1) else 1 (5 - 1) else 1
-> 5 * fix f n -> if n > 0 then n * f (n - 1) else 1 (4)
-> 5 * if 4 > 0 then 4 * fix f n -> if n > 0 then n * f (n - 1) else 1 (4 - 1) else 1
-> 5 * if true then 4 * fix f n -> if n > 0 then n * f (n - 1) else 1 (4 - 1) else 1
-> 5 * 4 * fix f n -> if n > 0 then n * f (n - 1) else 1 (3)
-> 5 * 4 * if 3 > 0 then 3 * fix f n -> if n > 0 then n * f (n - 1) else 1 (3 - 1) else 1
-> 5 * 4 * if true then 3 * fix f n -> if n > 0 then n * f (n - 1) else 1 (3 - 1) else 1
-> 5 * 4 * 3 * fix f n -> if n > 0 then n * f (n - 1) else 1 (2)
-> 5 * 4 * 3 * if 2 > 0 then 2 * fix f n -> if n > 0 then n * f (n - 1) else 1 (2 - 1) else 1
-> 5 * 4 * 3 * if true then 2 * fix f n -> if n > 0 then n * f (n - 1) else 1 (2 - 1) else 1
-> 5 * 4 * 3 * 2 * fix f n -> if n > 0 then n * f (n - 1) else 1 (1)
-> 5 * 4 * 3 * 2 * if 1 > 0 then 1 * fix f n -> if n > 0 then n * f (n - 1) else 1 (1 - 1) else 1
-> 5 * 4 * 3 * 2 * if true then 1 * fix f n -> if n > 0 then n * f (n - 1) else 1 (1 - 1) else 1
-> 5 * 4 * 3 * 2 * 1 * fix f n -> if n > 0 then n * f (n - 1) else 1 (0)
-> 5 * 4 * 3 * 2 * 1 * if 0 > 0 then 0 * fix f n -> if n > 0 then n * f (n - 1) else 1 (0 - 1) else 1
-> 5 * 4 * 3 * 2 * 1 * if false then 0 * fix f n -> if n > 0 then n * f (n - 1) else 1 (0 - 1) else 1
-> 5 * 4 * 3 * 2 * 1 * 1
-> 5 * 4 * 3 * 2 * 1
-> 5 * 4 * 3 * 2
-> 5 * 4 * 6
-> 5 * 24
-> 120
